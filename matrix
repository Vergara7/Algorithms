const int mod = 1e9 + 7;

struct matrix{

	int n, m;
	vector<vector<ll> > s;

	matrix(int n) : n(n), m(n) {
		s.resize(n);
		for (int i = 0; i < n; i++){
			s[i].resize(m);
			fill(s[i].begin(), s[i].end(), 0);
		}
	}

	matrix(int n, int m) : n(n), m(m) {
		s.resize(n);
		for (int i = 0; i < n; i++){
			s[i].resize(m);
			fill(s[i].begin(), s[i].end(), 0);
		}
	}	

	vector<ll>& operator[](int x){
		return s[x];
	}

	const vector<ll>& operator[](int x) const{
		return s[x];
	}
};

matrix identity(int n){
	matrix a = matrix(n);
	for (int i = 0; i < n; i++)
		a[i][i] = 1;
	return a;
}

void print(matrix a){
	for (int i = 0; i < a.n; i++){
		for (int j = 0; j < a.m; j++)
			cout << a[i][j] << " ";
		cout << endl;
	}
}

matrix operator + (matrix a, matrix b){
	assert(a.n == b.n && a.m == b.m);
	for (int i = 0; i < a.n; i++)
		for (int j = 0; j < a.m; j++)
			a[i][j] += b[i][j];
	return a;
}

void operator += (matrix &a, matrix b){
	assert(a.n == b.n && a.m == b.m);
	for (int i = 0; i < a.n; i++)
		for (int j = 0; j < a.m; j++)
			a[i][j] += b[i][j];
}

matrix operator - (matrix a, matrix b){
	assert(a.n == b.n && a.m == b.m);
	for (int i = 0; i < a.n; i++)
		for (int j = 0; j < a.m; j++)
			a[i][j] -= b[i][j];
	return a;
}

void operator -= (matrix &a, matrix b){
	assert(a.n == b.n && a.m == b.m);
	for (int i = 0; i < a.n; i++)
		for (int j = 0; j < a.m; j++)
			a[i][j] -= b[i][j];
}

matrix operator * (matrix a, matrix b){
	assert(a.m == b.n);
	matrix c = matrix(a.n, b.m);
	for (int i = 0; i < a.n; i++){
		for (int j = 0; j < b.m; j++){
			for (int k = 0; k < a.m; k++){
				c[i][j] += a[i][k] * b[k][j];
				c[i][j] %= mod;
			}
		}
	}
	return c;
}

void operator *= (matrix &a, matrix b){
	assert(a.m == b.n);
	matrix c = matrix(a.n, b.m);
	for (int i = 0; i < a.n; i++){
		for (int j = 0; j < b.m; j++){
			for (int k = 0; k < a.m; k++){
				c[i][j] += a[i][k] * b[k][j];
				c[i][j] %= mod;
			}
		}
	}
	for (int i = 0; i < a.n; i++){
		for (int j = 0; j < b.m; j++)
			a[i][j] = c[i][j];
	}
}

matrix power(matrix a, int n){
	assert(a.n == a.m);
	matrix res = identity(a.n);
	while (n > 0){
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
	}
	return res;
}

bool operator == (matrix a, matrix b){
	assert(a.n == b.n && a.m == b.m);
	for (int i = 0; i < a.n; i++)
		for (int j = 0; j < a.m; j++)
			if (a[i][j] != b[i][j])
				return false;
	return true;
}
