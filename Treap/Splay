class SplayTree{
public:
    static constexpr int inf = 1e9 + 7;

    struct node{
        int x;
        // data
        int type;
        node* sons[2];
        node* parent;

        node(int x = inf) : x(x), type(-1), parent(nullptr) {
            this->sons[0] = this->sons[1] = nullptr;
        }
    };

    node* root;

    SplayTree() {
        root = nullptr;
    }

    SplayTree(node* v) : root(v) {}

    void update(node* v){
        // recalc data
    }

    void setParent(node* v, node* p, int type){
        if (p != nullptr)
            p->sons[type] = v;
        if (v != nullptr){
            v->parent = p;
            v->type = type;
        }

        update(p);
    }

    void breakEdge(node* v){
        if (v == nullptr)
            return;
        node* p = v->parent;
        p->sons[v->type] = nullptr;
        v->parent = nullptr;
        v->type = -1;

        update(p);
    }

    void rotate(node* v){
        node* pparent = v->parent->parent;
        int ptype = v->parent->type;
        
        setParent(v->sons[1 ^ v->type], v->parent, v->type);
        setParent(v->parent, v, (v->type) ^ 1);
        setParent(v, pparent, ptype);
    }

    void zigzig(node* v){
        rotate(v->parent);
        rotate(v);
    }

    void zigzag(node* v){
        rotate(v);
        rotate(v);
    }

    node* splay(node* v){
        if (!v)
            return v;
        while (v->type != -1){
            if (v->parent->type == -1){
                rotate(v);
                break;
            }
            if (v->parent->type == v->type)
                zigzig(v);
            else
                zigzag(v);
        }
        return v;
    }

    node* goRight(node* v){
        if (v == nullptr)
            return v;
        while (v->sons[1] != nullptr)
            v = v->sons[1];
        return v;
    }

    node* splayMax(node* v){
        return splay(goRight(v));
    }

    node* merge(node* v, node* u){
        if (v == nullptr)
            return u;
        if (u == nullptr)
            return v;
        v = splayMax(v);
        setParent(u, v, 1);
        return v;
    }

    node* findClosest(node* v, int x){
        node* res = nullptr;
        while (v){
            if (v->x >= x){
                if (!res || v->x - x < abs(x - res->x))
                    res = v;
                v = v->sons[0];
            } else {
                if (!res || x - v->x < abs(x - res->x))
                    res = v;
                v = v->sons[1];
            }
        }
        return res;
    }

    void print(node* v){
        if (v == nullptr)
            return;
        print(v->sons[0]);
        cout << v->x << " ";
        print(v->sons[1]);
    }

    bool insert(int x){
        root = splay(findClosest(root, x));
        if (root && root->x == x)
            return false;
        node* v = new node(x);
        if (!root){
            root = v;
            return true;
        }
        if (root->x > x) { 
            if (root->sons[0] != nullptr)
                setParent(root->sons[0], v, 0);
            setParent(v, root, 0);
        } else {
            if (root->sons[1] != nullptr)
                setParent(root->sons[1], v, 1);
            setParent(v, root, 1);
        }
        return true;
    }

    bool remove(int x){
        root = splay(findClosest(root, x));
        if (root && root->x == x){
            node* left = root->sons[0];
            node* right = root->sons[1];
            breakEdge(left);
            breakEdge(right);
            root = merge(left, right);
            return true;
        }
        return false;
    }

    node* find(int x){
        root = splay(findClosest(root, x));
        return root;
    }

    bool exists(int x){
        root = splay(findClosest(root, x));
        return root && root->x == x;
    }

    pair<SplayTree, SplayTree> split(int x){
        auto s = splay(findClosest(root, x));
        if (s == nullptr)
            return {nullptr, nullptr};
        node* left = s;
        node* right = s;
        if (s->x >= x){
            left = s->sons[0];
            breakEdge(left);
        } else {
            right = s->sons[1];
            breakEdge(right);
        }
        return {SplayTree(left), SplayTree(right)};
    }
    
    void merge(SplayTree tree){
        root = merge(root, tree.root);
    }

    node* getRoot(){
        return root;
    }

    bool isValid(){
        return root;
    }

    void print(){
        print(root);
        cout << endl;
    }

    int getMin(){
        while (root && root->sons[0])
            root = root->sons[0];
        splay(root);
        return root ? root->x : inf;
    }

    int getMax(){
        while (root && root->sons[1])
            root = root->sons[1];
        splay(root);
        return root ? root->x : -inf;        
    }
};

SplayTree merge(SplayTree t1, SplayTree t2){
    t1.merge(t2);
    return t1;
}
