#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <unordered_map>
#include <cassert>
#include <time.h>
#include <sstream>
#include <random>

#define floor asdasds
#define prev asasdasd
#define next aasdasda
#define rank asdasdknlasd
#define move asdasdas
#define hash ljansld

using namespace std;

typedef long long ll;
typedef double dbl;

template<class T>
void print(vector<T> s){
    for (T x : s)
        cout << x << " "; 
    cout << endl;
}

int gcd(int a, int b){
	return b > 0 ? gcd(b, a % b) : a;
}

const int MAX_MEM = 5e8;
int mpos = 0;
char mem[MAX_MEM];
void * operator new ( size_t n ) {
	assert((mpos += n) <= MAX_MEM);
	return (void *)(mem + mpos - n);
}
void operator delete ( void * ) noexcept { }

// const int inf = 1e9 + 7;

mt19937 mrand(random_device{} ());
int rnd(int x = 1e9) {
    return mrand() % x;
}

int numberOfNodes = 0;

struct Node{
	int x;
	int cnt;
	Node* left;
	Node* right;
	Node(int x = 0) : x(x), cnt(1), left(nullptr), right(nullptr) {
		numberOfNodes++;
	}
};

Node* clone(Node* v){
	if (v == nullptr)
		return nullptr;
	Node* u = new Node(v -> x);
	u -> cnt = v -> cnt;
	u -> left = v -> left;
	u -> right = v -> right;
	return u;
}

void update(Node* &v){
	if (v == nullptr)
		return;
	v -> cnt = 1;
	if (v -> left != nullptr)
		v -> cnt += v -> left -> cnt;
	if (v -> right != nullptr)
		v -> cnt += v -> right -> cnt;
}

Node* merge(Node* v, Node* u){
	if (v == nullptr)
		return u;
	if (u == nullptr)
		return v;
	Node* q;
	int x = rnd(v -> cnt + u -> cnt);
	if (x < v -> cnt){
		q = clone(v);
		q -> right = merge(q -> right, u);
	}
	else{
		q = clone(u);
		q -> left = merge(v, q -> left);
	}
	update(q);
	return q;
}

pair<Node*, Node*> split(Node* v, int k){
	if (v == nullptr)
		return {v, v};
	Node* q = clone(v);
	int cnt = 1;
	if (q -> left != nullptr)
		cnt += q -> left -> cnt;
	pair<Node*, Node*> u;
	if (cnt <= k){
		u = split(q -> right, k - cnt);
		q -> right = u.first;
		update(q);
		return {q, u.second};
	}
	else{
		u = split(q -> left, k);
		q -> left = u.second;
		update(q);
		return {u.first, q};
	}
}

int get(Node* v, int pos){
	// assert(v != nullptr);
	if (v == nullptr)
		return -1;
	int cnt = 0;
	if (v -> left != nullptr)
		cnt += v -> left -> cnt;
	if (cnt == pos)
		return v -> x;
	if (cnt < pos)
		return get(v -> right, pos - cnt - 1);
	return get(v -> left, pos);
}

void print(Node* v){
	if (v == nullptr)
		return;
	print(v -> left);
	cout << v -> x << " ";
	print(v -> right);
}
