template<int maxn>
class network_flow{
public:
    struct edge{
        int to;
        int cap, flow, cost;
        size_t back_edge;
    };

private:
    int n;
    const ll inf = 1e12;
    vector<edge> s[maxn];

public:
    explicit network_flow(int n) : n(n) {}

    void add_edge(int from, int to, int c, int cost){
        s[from].push_back({to, c, 0, cost, s[to].size()});
        s[to].push_back({from, 0, 0, -cost, s[from].size() - 1});
    }

    pair<int, ll> run(int st = 0, int fin = -1){
        if (fin == -1)
            fin = n - 1;
        ll cost = 0;
        int flow = 0;
        int iter = 0, freq = (1 << 15) - 1;
        while (true){
            if ((iter & freq) == freq)
                bellman(st);
            if (!dijkstra(st, fin))
                break;
            int cur = fin;
            int mini = 1e9;
            while (cur != st){
                int p = prev[cur];
                mini = min(mini, s[p][ind[cur]].cap - s[p][ind[cur]].flow);
                cur = p;
            }
            flow += mini;
            cur = fin;
            while (cur != st){
                int p = prev[cur];
                s[p][ind[cur]].flow += mini;
                s[cur][s[p][ind[cur]].back_edge].flow -= mini;
                cost += (ll)mini * s[p][ind[cur]].cost;
                cur = p;
            }
            for (int v = 0; v < n; v++)
                phi[v] += dist[v];
        }
        return {flow, cost};
    }

private:
    ll dist[maxn], phi[maxn];
    int ind[maxn], prev[maxn], processed[maxn];

    void bellman(int st){
        fill(phi, phi + n, inf);
        phi[st] = 0;
        for (int iter = 0; iter < n; iter++){
            for (int i = 0; i < n; i++){
                for (auto& e : s[i]){
                    if (e.cap > e.flow)
                        phi[e.to] = min(phi[e.to], phi[i] + e.cost);
                }
            }
        }
    }

    bool dijkstra(int st, int fin){
        fill(dist, dist + n, inf);
        dist[st] = 0;
        fill(processed, processed + n, 0);
        priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> q;
        q.emplace(dist[st], st);
        bool ok = false;
        while (!q.empty()) {
            auto[d, v] = q.top();
            q.pop();
            if (v == fin)
                ok = true;
            if (processed[v])
                continue;
            for (int i = 0; i < (int)s[v].size(); i++){
                edge& e = s[v][i];
                if (e.cap == e.flow)
                    continue;
                ll new_d = d + e.cost + phi[v] - phi[e.to];
                if (new_d < dist[e.to]){
                    dist[e.to] = new_d;
                    // assert(!processed[e.to]);
                    q.emplace(dist[e.to], e.to);
                    ind[e.to] = i;
                    prev[e.to] = v;
                }
            }
            processed[v] = 1;
        }
        return ok;
    }
};
