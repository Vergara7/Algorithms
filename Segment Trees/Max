struct SegmentTreeMax{
	int b;
	vector<int> tree;
	static const int inf = 1e9;

	SegmentTreeMax(int n){
		b = 0;
		while ((1 << b) < n)
			b++;
		b = (1 << b);
		tree.resize(2 * b - 1);
		fill(tree.begin(), tree.end(), -inf);
	}

	void update(int pos, int value){
		pos += b - 1;
		tree[pos] = value;
		while (pos > 0){
			pos = ((pos - 1) >> 1);
			tree[pos] = max(tree[(pos << 1) + 1], tree[(pos << 1) + 2]);
		}
	}

	ll getMax(int v, int vl, int vr, int l, int r){
		if (vl >= r || vr <= l)
			return -inf;
		if (vl >= l && vr <= r)
			return tree[v];
		int vm = (vl + vr) >> 1;
		return max(getMax((v << 1) + 1, vl, vm, l, r), getMax((v << 1) + 2, vm, vr, l, r));
	}

	ll get(int l, int r){
		return getMax(0, 0, b, l, r);
	}
};
