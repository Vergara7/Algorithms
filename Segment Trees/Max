struct SegmentTreeMax{

	int b;
	vector<int> tree;
	static const int inf = 1e9 + 7;

	SegmentTreeMax(int n){
		b = 0;
		while ((1 << b) < n)
			b++;
		b = (1 << b);
		tree.resize(2 * b);
		fill(tree.begin(), tree.end(), -inf);
	}

	inline void update(int pos, int value){
		pos += b;
		tree[pos] = value;
		while (pos > 0){
			pos >>= 1;
			tree[pos] = max(tree[pos << 1], tree[(pos << 1) | 1]);
		}
	}

	ll getMax(int v, int vl, int vr, int l, int r){
		if (vl >= r || vr <= l)
			return -inf;
		if (vl >= l && vr <= r)
			return tree[v];
		int vm = (vl + vr) >> 1;
		return max(getMax(v << 1, vl, vm, l, r), getMax((v << 1) | 1, vm, vr, l, r));
	}

	ll get(int l, int r){
		return getMax(1, 0, b, l, r);
	}

	int getTheLeftmost(int v, int vl, int vr, int l, int r, int val){
		if (vl >= r || vr <= l)
			return -1;
		int vm = (vl + vr) >> 1;
		if (vl >= l && vr <= r){
			if (vr - vl == 1){
				if (tree[v] >= val)
					return vl;
				return -1;
			}
			if (tree[v << 1] >= val)
				return getTheLeftmost(v << 1, vl, vm, l, r, val);
			return getTheLeftmost((v << 1) | 1, vm, vr, l, r, val);
		}
		int x = getTheLeftmost(v << 1, vl, vm, l, r, val);
		if (x != -1)
			return x;
		return getTheLeftmost((v << 1) | 1, vm, vr, l, r, val);
	}

	int getTheRightmost(int v, int vl, int vr, int l, int r, int val){
		if (vl >= r || vr <= l)
			return -1;
		int vm = (vl + vr) >> 1;
		if (vl >= l && vr <= r){
			if (vr - vl == 1){
				if (tree[v] >= val)
					return vl;
				return -1;
			}
			if (tree[(v << 1) | 1] >= val)
				return getTheLeftmost((v << 1) | 1, vl, vm, l, r, val);
			return getTheLeftmost(v << 1, vm, vr, l, r, val);
		}
		int x = getTheLeftmost((v << 1) | 1, vl, vm, l, r, val);
		if (x != -1)
			return x;
		return getTheLeftmost(v << 1, vm, vr, l, r, val);
	}

	int theLeftmost(int l, int r, int val){
		return getTheLeftmost(1, 0, b, l, r, val);
	}

	int theRightmost(int l, int r, int val){
		return getTheRightmost(1, 0, b, l, r, val);
	}
};
