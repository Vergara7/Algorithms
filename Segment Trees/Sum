struct SegmentTreeSum{
  
	int b;
	vector<ll> tree;

	SegmentTreeSum(int n){
		b = 0;
		while ((1 << b) < n)
			b++;
		b = (1 << b);
		tree.resize(2 * b);
		fill(tree.begin(), tree.end(), 0);
	}

	void update(int pos, int value){
		pos += b;
		tree[pos] = value;
		while (pos > 0){
			pos >>= 1;
			tree[pos] = tree[pos << 1] + tree[(pos << 1) | 1];
		}
	}

	ll cntSum(int v, int vl, int vr, int l, int r){
		if (vl >= r || vr <= l)
			return 0;
		if (vl >= l && vr <= r)
			return tree[v];
		int vm = (vl + vr) >> 1;
		return cntSum(v << 1, vl, vm, l, r) + cntSum((v << 1) | 1, vm, vr, l, r);
	}

	ll get(int l, int r){
		return cntSum(1, 0, b, l, r);
	}
};
