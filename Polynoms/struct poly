struct poly{

	static const int mod = 1e9 + 7;
	vector<ll> s;

	poly(){
		s.clear();
	}

	template<class T>
	poly(T n){
		s.resize((int)n);
		fill(s.begin(), s.end(), 0);
	}

	template<class T>
	poly(vector<T> t){
		s.resize(t.size());
		for (int i = 0; i < t.size(); i++)
			s[i] = t[i];
	}

	ll& operator[](int x){
		return s[x];
	}

	const ll& operator[](int x) const{
		return s[x];
	}

	int size(){
		return s.size();
	}

	void resize(int n){
		s.resize(n);
	}
};

ll getVal(poly a, ll k){
	ll cur = 1;
	ll res = 0;
	for (int i = 0; i < a.size(); i++){
		res = (res + a[i] * cur) % a.mod;
		cur = cur * k % a.mod;
	}
	return res;
}

void print(poly &a){
	for (int i = 0; i < a.size(); i++)
		cout << a[i] << " ";
	cout << endl;
}

poly identity(){
	poly a = poly(1);
	a[0] = 1;
	return a;
}

namespace fft{

    typedef double dbl;
    typedef long long ll;

    struct Complex{
        dbl x, y;
        Complex(dbl x = 0, dbl y = 0) : x(x), y(y) {}
    };

    Complex operator + (Complex a, Complex b) { return Complex(a.x + b.x, a.y + b.y); }
    Complex operator - (Complex a, Complex b) { return Complex(a.x - b.x, a.y - b.y); }
    Complex operator * (Complex a, Complex b) { return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x); }
    Complex conj(Complex a) { return Complex(a.x, -a.y); }

    int base = 1;
    const dbl PI = atan2(0, -1);
    vector<Complex> roots = {{0, 0}, {1, 0}};
    vector<int> rev = {0, 1};

    void ensureBase(int b){
        if (b <= base)
            return;

        rev.resize(1 << b);
        for (int i = 0; i < (1 << b); i++)
            rev[i] = (rev[i >> 1] >> 1) + ((i & 1) << (b - 1));

        roots.resize(1 << b);
        while (base < b){
            dbl angle = PI / (1 << base);
            for (int i = (1 << (base - 1)); i < (1 << base); i++){
                roots[i << 1] = roots[i];
                dbl angle_i = (2 * i + 1 - (1 << base)) * angle;
                roots[(i << 1) + 1] = Complex(cos(angle_i), sin(angle_i));
            }
            base++;
        }
    }

    void fft(vector<Complex> &f, int n){
        int shift = 0;
        while ((1 << shift) < n)
            shift++;
        ensureBase(shift);
        shift = base - shift;
        for (int i = 0; i < n; i++)
            if (i > (rev[i] >> shift))
                swap(f[i], f[rev[i] >> shift]);

        for (int len = 1; len < n; len *= 2){
            for (int i = 0; i < n; i += 2 * len){
                for (int j = i, k = i + len; j < i + len; j++, k++){
                    Complex z = f[k] * roots[k - i];
                    f[k] = f[j] - z;
                    f[j] = f[j] + z;
                }
            }
        }
    }

    vector<Complex> f;
    vector<ll> answer;

    vector<ll> multiply(vector<int> &a, vector<int> &b){
        int need = a.size() + b.size() - 1;
        int bb = 0;
        while ((1 << bb) < need)
            bb++;
        ensureBase(bb);
        int n = (1 << bb);
        f.resize(n);
        for (int i = 0; i < n; i++){
            f[i].x = (i < a.size() ? a[i] : 0);
            f[i].y = (i < b.size() ? b[i] : 0);
        }
        fft(f, n);
        Complex r = Complex(0, -0.25 / n);
        for (int i = 0; i <= n / 2; i++){
            int j = (n - i) & (n - 1);
            Complex z = (f[j] * f[j] - conj(f[i] * f[i])) * r;
            if (i != j)
                f[j] = (f[i] * f[i] - conj(f[j] * f[j])) * r;
            f[i] = z;
        }
        fft(f, n);
        answer.resize(need);
        for (int i = 0; i < need; i++)
            answer[i] = (ll)(f[i].x + 0.5);
        return answer;
    }

    const int k = 15;

    poly ans;

    poly multiplyWithMod(poly &a, poly &b){
    	int mod = a.mod;
    	int kk = (1 << k);
    	int kkk = (kk << k) % mod;
    	int need = a.size() + b.size() - 1;
    	ans = poly(need);
    	vector<int> aa(a.size());
    	vector<int> bb(b.size());

    	for (int i = 0; i < a.size(); i++)
    		aa[i] = a[i] >> k;
    	for (int i = 0; i < b.size(); i++)
    		bb[i] = b[i] >> k; 
    	vector<ll> c = multiply(aa, bb);
    	for (int i = 0; i < need; i++){
    		ll x = c[i] % mod;
    		ans[i] += x * (kkk - kk);
    	}

    	for (int i = 0; i < a.size(); i++)
    		aa[i] = a[i] & (kk - 1);
    	for (int i = 0; i < b.size(); i++)
    		bb[i] = b[i] & (kk - 1);
    	c = multiply(aa, bb);
    	for (int i = 0; i < need; i++){
    		ll x = c[i] % mod;
    		ans[i] += x * (1 - kk);
    	}

    	for (int i = 0; i < a.size(); i++)
    		aa[i] += a[i] >> k;
    	for (int i = 0; i < b.size(); i++)
    		bb[i] += b[i] >> k;
    	c = multiply(aa, bb);
    	for (int i = 0; i < need; i++){
    		ans[i] += c[i] % mod * kk;
    		ans[i] %= mod;
    		if (ans[i] < 0)
    			ans[i] += mod;
    	}
    	return ans;
    }
};

poly operator + (poly a, poly &b){
	if (a.size() < b.size())
		a.resize(b.size());
	for (int i = 0; i < b.size(); i++){
		a[i] += b[i];
		if (a[i] >= a.mod)
			a[i] -= a.mod;
	}
	return a;
}

void operator += (poly &a, poly &b){
	if (a.size() < b.size())
		a.resize(b.size());
	for (int i = 0; i < b.size(); i++){
		a[i] += b[i];
		if (a[i] >= a.mod)
			a[i] -= a.mod;
	}
}

poly operator - (poly a, poly &b){
	if (a.size() < b.size())
		a.resize(b.size());
	for (int i = 0; i < b.size(); i++){
		a[i] -= b[i];
		if (a[i] < 0)
			a[i] -= a.mod;
	}
	return a;
}

void operator -= (poly &a, poly &b){
	if (a.size() < b.size())
		a.resize(b.size());
	for (int i = 0; i < b.size(); i++){
		a[i] -= b[i];
		if (a[i] < 0)
			a[i] -= a.mod;
	}
}

poly operator * (poly a, ll k){
	k %= a.mod;
	for (int i = 0; i < a.size(); i++)
		a[i] = a[i] * k % a.mod;
	return a;
}

void operator *= (poly a, ll k){
	k %= a.mod;
	for (int i = 0; i < a.size(); i++)
		a[i] = a[i] * k % a.mod;
}

poly operator * (poly a, poly b){
	return fft::multiplyWithMod(a, b);
}

void operator *= (poly a, poly b){
	a = fft::multiplyWithMod(a, b);
}

poly power(poly a, int n, int need){
	poly res = identity();
	while (n > 0){
		if (n & 1){
			res *= a;
			if (res.size() > need)
				res.resize(need);
		}
		a *= a;
		if (a.size() > need)
			a.resize(need);
		n >>= 1;
	}
	return res;
}
