namespace factorisation{

	typedef long long ll;
	typedef long double dbl;

	ll multiply(ll a, ll b, ll mod){
		ll q = (dbl)a * (dbl)b / (dbl)mod;
		ll rem = a * b - q * mod;
		if (rem < 0)
			rem += mod;
		if (rem >= mod)
			rem -= mod;
		return rem;
	}

	ll power(ll a, ll n, ll mod){
		ll res = 1;
		while (n > 0){
			if (n & 1)
				res = multiply(res, a, mod);
			a = multiply(a, a, mod);
			n >>= 1;
		}
		return res;
	}

	bool isPrime(ll n){
		if (n == 1)
			return false;
		if (!(n & 1))
			return n == 2;
		ll s = (n - 1);
		int k = 0;
		while (!(s & 1)){
			s >>= 1;
			k++;
		}
		vector<ll> a = {2, 3, 5, 7, 11, 13, 17, 19, 23};
		for (ll b : a){
			if (n % b == 0){
				if (n == b)
					return true;
				return false;
			}
			ll res = power(b, s, n);
			if (res <= 1)
				continue;
			for (int j = 0; j < k; j++){
				ll ress = power(res, 2, n);
				if (ress == 1){
					if (res != n - 1)
						return false;
					res = ress;
					break;
				}
				res = ress;
			}
			if (res != 1)
				return false;
		}
		return true;
	}

	ll gcd(ll a, ll b){
		if (a == 0)
			return b;
		if (b == 0)
			return a;
		if ((a & 1) && (b & 1))
			return a > b ? gcd(a - b, b) : gcd(a, b - a);
		if (a & 1)
			return gcd(a, b >> 1);
		if (b & 1)
			return gcd(a >> 1, b);
		return gcd(a >> 1, b >> 1) << 1;
	}

	ll f(ll x, ll mod){
		x = multiply(x, x, mod);
		x += 1;
		if (x >= mod)
			x -= mod;
		return x;
	}

	vector<ll> answer;

	const int k = 1000;

	int kk = 0;
	ll s[k];

	void pollard(ll n){
		if (n == 1)
			return;
		if (isPrime(n)){
			answer.push_back(n);
			return;
		}
		ll x = 0, y;
		while (true){
			x++;
			y = x;
			kk = 0;
			ll now = 1;
			bool ok = true;
			for (int i = 0; i < 1000000; i++){
				x = f(x, n);
				y = f(f(y, n), n);
				s[kk] = abs(x - y);
				if (s[kk] == 0)
					break;
				now = multiply(now, s[kk++], n);
				if (kk == k){
					ll d = gcd(n, now);
					if (d == 1){
						kk = 0;
						now = 1;
						continue;
					}
					if (d > 1 && d < n){
						pollard(d);
						pollard(n / d);
						return;
					}
					for (int j = 0; j < kk; j++){
						d = gcd(s[j], n);
						if (d == n){
							ok = false;
							break;
						}
						if (d > 1 && d < n){			
							pollard(d);	
							pollard(n / d);
							return;
						}
					}
					if (!ok)
						break;
				}
			}
		}
	}

	vector<ll> getFactorisation(ll n){
		answer.clear();
		for (int b = 2; b <= 3e4; b++){
			if (n % b == 0){
				while (n % b == 0){
					answer.push_back(b);
					n /= b;
				}
			}
		}
		pollard(n);
		return answer;
	}
}
